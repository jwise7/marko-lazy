import renderList from "../../../lazy-renderers.js";
class {
  onCreate(input, output) {
    this.state = {
      componentName: input.component,
      model: input.model,
      componentRenderer: null,
      renderMethod: input.renderMethod || null,
      enhanceModel: input.enhanceModel || null,
      rawHtml:null
    };
  }
  onMount() {
    this.checkForLazyLoads = this.checkForLazyLoads.bind(this);
    this.doCheckForLazyLoads = this.doCheckForLazyLoads.bind(this);
    window.addEventListener("scroll", this.checkForLazyLoads);
    window.addEventListener("resize", this.checkForLazyLoads);
    window.addEventListener("focus", this.checkForLazyLoads);
    document.addEventListener("checkForLazyLoads", this.checkForLazyLoads)
    if (document.readyState === "complete") this.checkForLazyLoads();
    else window.addEventListener("load", this.checkForLazyLoads); // Makes sure lazy loaded components render immediately if in initial viewport
  }
  onDestroy() {
    this.removeListeners();
  }
  checkForLazyLoads() {
    if (typeof this.checkQueued == "undefined" || !this.checkQueued) {
      this.checkQueued = true;
      setTimeout(this.doCheckForLazyLoads, 300);
    }
  }
  doCheckForLazyLoads() {
    this.checkQueued = false;
    if(typeof this.el === "undefined") return 
    let bounding = this.el.getBoundingClientRect();
    let tabIsActive = !document.hidden; // Wait for the tab to be active. Lazy loading times out if tab isn't active.
    let isHidden = bounding.width === 0 && bounding.height === 0; // When an element is hidden or display:none, getBoundingClientRect returns 0 for all position dimensions. Without this, when viewing mobile the desktop lazy elements would trigger immediately since position.top is equal to 0.
    if (!tabIsActive || isHidden) return;
    const SCROLL_BUFFER = 300;
    // Checking for partial visibility if scrollBuffer is 0. Otherwise checking for buffer space above element.
    if (
      bounding.top <= 0 ||
      (bounding.top <
        ((window.innerHeight || document.documentElement.clientHeight) + SCROLL_BUFFER) &&
        bounding.bottom >= 0)
    ) {
      this.loadComponent()
    }
  }
  async loadComponent(attempts = 0) {
    this.removeListeners();
    try {
      if (this.state.enhanceModel) await this.enhanceModel();
      let r;
      if(this.state.renderMethod){
        r = await this.state.renderMethod();
      }else
        r = await renderList(this.state.componentName);
      if(typeof r == "string"){
        let res = await fetch(r,{
          method:"POST",
          headers:{"Content-Type":"application/json"},
          body:JSON.stringify(this.state.model)
        })
        this.state.rawHtml = await res.text()
      }
      else if (r != null) {
        this.once("update", () => {
          this.el.style.opacity = 0;
          this.el.style.transition = "opacity 1s";
          setTimeout(() => (this.el.style.opacity = 1));
        });
        return (this.state.componentRenderer = r);
      }
    } catch (err) {
      setTimeout(() => {
        if(attempts < 3)
          this.loadComponent(attempts + 1);
        else
          console.error(err);
      },1000)
    }
  }
  enhanceModel() {
    return new Promise(resolve => {
      let xReq = new XMLHttpRequest();
      xReq.onreadystatechange = function () {
        if (xReq.readyState == 4 && xReq.status == 200) {
          this.state.model = JSON.parse(xReq.responseText).model;
          return resolve();
        }
      }.bind(this);
      let data = JSON.stringify(this.state.model);
      let route = this.state.enhanceModel;
      xReq.open("POST", route, true);
      xReq.setRequestHeader("Content-type", "application/json");
      xReq.send(data);
    });
  }
  removeListeners() {
    window.removeEventListener("scroll", this.checkForLazyLoads);
    window.removeEventListener("resize", this.checkForLazyLoads);
    window.removeEventListener("focus", this.checkForLazyLoads);
  }
}
if(state.rawHtml != null)
  -- $!{state.rawHtml}
else-if(state.componentRenderer != null)
  ${state.componentRenderer} ...state.model
else-if(input.skeleton)
  div style=`content-visibility:auto;${input.skeletonContainerStyle||""}` class=(input.skeletonContainerClass||"")
    ${input.skeleton.renderBody}
else
  div -- &nbsp;